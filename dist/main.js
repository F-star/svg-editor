/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/activedElsManager.js":(t,e,s)=>{s.r(e),s.d(e,{ActivedElsManager:()=>r});class r{constructor(t){this.editor=t,this.els=[]}setEls(t){this.els=t,this.heighligthEls()}clear(){this.els=[];this.editor.hudManager.outlineHud.clear()}contains(t){}getbbox(){}heighligthEls(){const t=this.els,e=this.editor.hudManager;t.forEach((t=>{const{x:s,y:r,width:o,height:i}=t.getBBox();e.outlineHud.drawRect(s,r,o,i)}))}}},"./src/command.js":(t,e,s)=>{s.r(e),s.d(e,{AddRectCommand:()=>i,DMove:()=>n});var r=s("./src/constants.js");class o{undo(){throw new Error("please override undo method")}redo(){throw new Error("please override redo method")}}class i extends o{constructor(t,e,s,o,i){super();const n=document.createElementNS(r.NS.SVG,"rect");n.setAttribute("x",e),n.setAttribute("y",s),n.setAttribute("width",o),n.setAttribute("height",i);const a=t.setting.get("fill"),c=t.setting.get("stroke"),h=t.setting.get("strokeWidth");n.setAttribute("fill",a),n.setAttribute("stroke",c),n.setAttribute("stroke-width",h),t.getCurrentLayer().appendChild(n),this.nextSibling=n.nextElementSibling,this.parent=n.parentElement,this.element=n}static name(){return"addRect"}redo(){this.nextSibling?this.parent.insertBefore(this.element,this.nextSibling):this.parent.appendChild(this.element)}undo(){this.element.remove()}}class n extends o{constructor(t,e,s,r){super(),this.dx=s,this.dy=r,this.els=e,this.els.forEach((t=>{t.dmove(this.dx,this.dy)}))}static name(){return"dmove"}redo(){this.els.forEach((t=>{t.dmove(this.dx,this.dy)}))}undo(){this.els.forEach((t=>{t.dmove(-this.dx,-this.dy)}))}}},"./src/commandManager.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});const r=class{constructor(){this.redoStack=[],this.undoStack=[],this.commandClasses={}}setEditor(t){this.editor=t}execute(t,...e){t=t.toLowerCase();const s=new(0,this.commandClasses[t])(this.editor,...e);this.undoStack.push(s),this.redoStack=[]}undo(){if(0===this.undoStack.length)return void console.log("到头了，无法继续撤回");const t=this.undoStack.pop();this.redoStack.push(t),t.undo()}redo(){if(0===this.redoStack.length)return void console.log("到头了，无法继续重做");const t=this.redoStack.pop();this.undoStack.push(t),t.redo()}resigterCommandClass(t){name=t.name().toLowerCase(),this.commandClasses[name]=t}}},"./src/constants.js":(t,e,s)=>{s.r(e),s.d(e,{NS:()=>r});const r={HTML:"http://www.w3.org/1999/xhtml",MATH:"http://www.w3.org/1998/Math/MathML",SE:"http://svg-edit.googlecode.com",SVG:"http://www.w3.org/2000/svg",XLINK:"http://www.w3.org/1999/xlink",XML:"http://www.w3.org/XML/1998/namespace",XMLNS:"http://www.w3.org/2000/xmlns/"}},"./src/editor.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});var r=s("./src/activedElsManager.js"),o=(s("./src/editorEventContext.js"),s("./src/layer/hudManager.js"));const i=class{constructor(){this.setting=null,this.commandManager=null,this.zoomManager=null,this.activedElsManager=new r.ActivedElsManager(this);const t=document.createElement("div");t.id="viewport",t.style.border="1px solid #000",t.style.width="800px",t.style.height="550px",this.viewport=t;const e=document.createElement("div");e.id="svg-container",e.style.backgroundColor="#ddd",e.style.width="800px",e.style.height="550px",e.style.overflow="scroll",this.svgContainer=e;const s=document.createElementNS("http://www.w3.org/2000/svg","svg");s.id="svg-root",s.setAttribute("width",1e3),s.setAttribute("height",600),s.setAttribute("viewBox","0 0 1000 600"),this.svgRoot=s;const i=document.createElementNS("http://www.w3.org/2000/svg","svg");i.id="svg-stage",i.setAttribute("width",400),i.setAttribute("height",300),i.setAttribute("x",300),i.setAttribute("y",150),i.style.overflow="visible",this.svgStage=i;const n=document.createElementNS("http://www.w3.org/2000/svg","g");n.id="background",n.setAttribute("x",0),n.setAttribute("y",0);const a=document.createElementNS("http://www.w3.org/2000/svg","rect");a.setAttribute("width","100%"),a.setAttribute("height","100%"),a.setAttribute("fill","#fff");const c=document.createElementNS("http://www.w3.org/2000/svg","g");c.id="content",c.setAttribute("x",0),c.setAttribute("y",0),this.svgContent=c;const h=document.createElementNS("http://www.w3.org/2000/svg","g");h.id="layer-1",this.currentLayer=h,t.appendChild(e),e.appendChild(s),s.appendChild(i),i.appendChild(n),n.appendChild(a),i.appendChild(c),c.appendChild(h),this.hudManager=new o.HudManager,this.hudManager.mount(i)}mount(t){document.querySelector(t).appendChild(this.viewport)}getCurrentLayer(){return this.currentLayer}setToolManager(t){this.toolManager=t}setCurrentTool(t){this.toolManager.setCurrentTool(t)}registerTool(t){this.toolManager.registerTool(t)}setSetting(t){this.setting=t}setCommandManager(t){this.commandManager=t,t.setEditor(this)}executeCommand(t,...e){"undo"!=t?"redo"!=t?this.commandManager.execute(t,...e):this.commandManager.redo():this.commandManager.undo()}setZoomManager(t){t.setEditor(this),this.zoomManager=t}getZoom(){return this.zoomManager.getZoom()}getScroll(){return{x:this.svgContainer.scrollLeft,y:this.svgContainer.scrollTop}}setScroll(t,e){this.svgContainer.scrollLeft=t,this.svgContainer.scrollTop=e}getContentOffset(){return{x:this.svgStage.getAttribute("x"),y:this.svgStage.getAttribute("y")}}isContentElement(t){for(;t;){if(t.parentElement==this.svgContent)return!0;if(t.parentElement==this.svgRoot)return!1;t=t.parentElement}return!1}}},"./src/editorEventContext.js":(t,e,s)=>{s.r(e),s.d(e,{EditorEventContext:()=>r});class r{constructor(t,e){this.mousePressed=!1,this.originEvent=e,this.editor=t,this.isEndInside=!1,this.startX=0,this.startY=0,this.offsetX=0,this.offsetY=0,this.startClientX=0,this.startClientY=0,this.dx=0,this.dy=0,this.setStartPos()}setOriginEvent(t){this.originEvent=t}setStartPos(){const{x:t,y:e}=this.getPos();this.startX=t,this.startY=e,this.startClientX=this.originEvent.clientX,this.startClientY=this.originEvent.clientY}releaseMouse(){this.mousePressed=!1}pressMouse(){this.mousePressed=!0}getPos(){const t=this.editor.getZoom(),{x:e,y:s}=this.editor.getContentOffset();return{x:this.originEvent.offsetX/t-e,y:this.originEvent.offsetY/t-s}}getStartPos(){return{x:this.startX,y:this.startY}}getDiffPos(){return{x:this.originEvent.clientX-this.startClientX,y:this.originEvent.clientY-this.startClientY}}}},"./src/editorSetting.js":(t,e,s)=>{s.r(e),s.d(e,{EditorSetting:()=>r});class r{constructor(){this.setting={fill:"#fff",stroke:"#000",strokeWidth:"2px"}}setFill(t){this.setting.fill=t}setStroke(t){this.setting.fill=t}set(t,e){this.setting[t]=e}get(t){return this.setting[t]}}},"./src/element/baseElement.js":(t,e,s)=>{s.r(e),s.d(e,{FElement:()=>r});class r{constructor(){this.el_=null}el(){return this.el_}setAttr(t,e){return this.el_.setAttribute(t,e)}getAttr(t){return this.el_.getAttribute(t)}getBBox(){return this.el_.getBBox()}}},"./src/element/index.js":(t,e,s)=>{s.r(e),s.d(e,{FSVG:()=>r});const r={Rect:s("./src/element/rect.js").Rect}},"./src/element/rect.js":(t,e,s)=>{s.r(e),s.d(e,{Rect:()=>i});var r=s("./src/constants.js"),o=s("./src/element/baseElement.js");class i extends o.FElement{constructor(t,e,s,o){super(),"object"==typeof t?this.el_=t:(this.el_=document.createElementNS(r.NS.SVG,"rect"),this.el_.setAttr("x",t),this.el_.setAttr("y",e),this.el_.setAttr("width",s),this.el_.setAttr("height",o))}getPos(){return{x:parseFloat(this.getAttr("x")),y:parseFloat(this.getAttr("y"))}}dmove(t,e){const s=this.getPos();this.setAttr("x",s.x+t),this.setAttr("y",s.y+e)}}},"./src/index.js":(t,e,s)=>{s.r(e);var r=s("./src/commandManager.js"),o=s("./src/editor.js"),i=s("./src/modules/addRect.js"),n=s("./src/modules/dragCanvas.js"),a=s("./src/command.js"),c=s("./src/editorSetting.js"),h=s("./src/modules/zoom.js"),l=s("./src/modules/select.js"),d=s("./src/toolManager.js");const u=new o.default,g=new r.default;g.resigterCommandClass(a.AddRectCommand),g.resigterCommandClass(a.DMove),u.setSetting(new c.EditorSetting),u.setCommandManager(g);const m=new d.ToolManager(u);u.setToolManager(m),m.registerTool(new i.default),m.registerTool(new n.DragCanvas),m.registerTool(new l.Select),u.toolManager.onSwitchTool((t=>{console.log("switched tool:",t),function(t){if(null==(t={select:"btn-select",addRect:"btn-add-rect",dragCanvas:"btn-drag-canvas"}[t]))return;const e=document.querySelector("#tool-bar");Array.prototype.slice.call(e.children).forEach((t=>{t.classList.remove("active")})),document.getElementById(t).classList.add("active")}(t)})),m.setCurrentTool("addRect"),m.bindToolEvent(),u.setZoomManager(new h.ZoomManager),u.mount("#editor-area"),document.querySelector("#btn-undo").onclick=()=>{u.executeCommand("undo")},document.querySelector("#btn-redo").onclick=function(){u.executeCommand("redo")},document.querySelector("#btn-zoom-in").onclick=function(){u.zoomManager.zoomIn()},document.querySelector("#btn-zoom-out").onclick=function(){u.zoomManager.zoomOut()},document.querySelector("#btn-add-rect").onclick=function(){u.setCurrentTool("addRect")},document.querySelector("#btn-drag-canvas").onclick=function(){u.setCurrentTool("dragCanvas")},document.querySelector("#btn-select").onclick=function(){u.setCurrentTool("select")}},"./src/layer/hudManager.js":(t,e,s)=>{s.r(e),s.d(e,{HudManager:()=>n});var r=s("./src/layer/outlineHud.js"),o=s("./src/layer/selectArea.js");const{NS:i}=s("./src/constants.js");class n{constructor(){this.container=document.createElementNS(i.SVG,"g"),this.container.id="huds",this.selectArea=new o.SelectArea(this.container),this.outlineHud=new r.OutlineHud(this.container)}mount(t){t.appendChild(this.container)}}},"./src/layer/outlineHud.js":(t,e,s)=>{s.r(e),s.d(e,{OutlineHud:()=>o});const{NS:r}=s("./src/constants.js");class o{constructor(t){this.x=0,this.y=0,this.w=0,this.h=0,this.container=document.createElementNS(r.SVG,"g"),this.container.id="outline-hud",t.appendChild(this.container),this.outline=document.createElementNS(r.SVG,"path"),this.outline.setAttribute("fill","none"),this.outline.setAttribute("stroke","#f04"),this.outline.setAttribute("vector-effect","non-scaling-stroke"),this.container.appendChild(this.outline)}clear(){this.outline.style.display="none"}drawRect(t,e,s,r){this.x=t,this.y=e,this.w=s,this.h=r;const o=`M ${t} ${e} L ${t+s} ${e} L ${t+s} ${e+r} L ${t} ${e+r} Z`;this.outline.setAttribute("d",o),this.outline.style.display=""}getWidth(){return this.w}getHeight(){return this.h}getX(){return this.x}getY(){return this.y}}},"./src/layer/selectArea.js":(t,e,s)=>{s.r(e),s.d(e,{SelectArea:()=>o});const{NS:r}=s("./src/constants.js");class o{constructor(t){this.x=0,this.y=0,this.w=0,this.h=0,this.container=document.createElementNS(r.SVG,"g"),this.container.id="select-area",t.appendChild(this.container),this.outline=document.createElementNS(r.SVG,"path"),this.outline.setAttribute("fill","none"),this.outline.setAttribute("stroke","#054"),this.outline.setAttribute("vector-effect","non-scaling-stroke"),this.outline.setAttribute("stroke-dasharray","4px"),this.container.appendChild(this.outline)}clear(){this.outline.style.display="none"}drawRect(t,e,s,r){this.x=t,this.y=e,this.w=s,this.h=r;const o=`M ${t} ${e} L ${t+s} ${e} L ${t+s} ${e+r} L ${t} ${e+r} Z`;this.outline.setAttribute("d",o),this.outline.style.display=""}getWidth(){return this.w}getHeight(){return this.h}getX(){return this.x}getY(){return this.y}}},"./src/modules/addRect.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var r=s("./src/util/math.js");const o=class{constructor(){this.editor=null}name(){return"addRect"}setEditor(t){this.editor=t}start(t){}move(t){const{x:e,y:s}=t.getPos(),{x:o,y:i}=t.getStartPos(),{x:n,y:a,w:c,h}=(0,r.getBoxBy2points)(o,i,e,s);this.editor.hudManager.outlineHud.drawRect(n,a,c,h)}end(t){this.editor.hudManager.outlineHud.clear();const{x:e,y:s}=t.getPos(),{x:o,y:i}=t.getStartPos(),{x:n,y:a,w:c,h}=(0,r.getBoxBy2points)(o,i,e,s);c<2&&h<2?console.log("width and height both less equal to 2，drawing nothing"):this.editor.executeCommand("addRect",n,a,c,h)}endOutside(){this.editor.hudManager.outlineHud.clear()}}},"./src/modules/dragCanvas.js":(t,e,s)=>{s.r(e),s.d(e,{DragCanvas:()=>r});class r{constructor(){this.startOffsetX=0,this.startOffsetY=0}name(){return"dragCanvas"}setEditor(t){this.editor=t}beforeActive(){}start(t){const e=this.editor.getScroll();this.startOffsetX=e.x,this.startOffsetY=e.y}move(t){this.editor.getZoom();const{x:e,y:s}=t.getDiffPos();this.editor.setScroll(this.startOffsetX-e,this.startOffsetY-s)}end(){}endOutside(){}}},"./src/modules/select.js":(t,e,s)=>{s.r(e),s.d(e,{Select:()=>i});var r=s("./src/element/index.js"),o=s("./src/util/math.js");class i{constructor(){this.editor=null,this.selectedEls=[],this.outlineStartX=0,this.outlineStartY=0}name(){return"select"}setEditor(t){this.editor=t}hasSelectedElsWhenStart(){return this.selectedEls.length>0}start(t){const e=t.originEvent.target;if(!this.editor.isContentElement(e))return;const s=new r.FSVG.Rect(e);this.selectedEls=[s];const o=parseFloat(s.getAttr("x")),i=parseFloat(s.getAttr("y")),n=parseFloat(s.getAttr("width")),a=parseFloat(s.getAttr("height"));this.outlineStartX=o,this.outlineStartY=i,this.editor.hudManager.outlineHud.drawRect(o,i,n,a)}move(t){if(!this.hasSelectedElsWhenStart()){const{x:e,y:s}=t.getPos(),{x:r,y:i}=t.getStartPos(),{x:n,y:a,w:c,h}=(0,o.getBoxBy2points)(r,i,e,s);return void this.editor.hudManager.selectArea.drawRect(n,a,c,h)}const{x:e,y:s}=t.getDiffPos(),r=this.editor.hudManager.outlineHud,i=r.getWidth(),n=r.getHeight();r.drawRect(this.outlineStartX+e,this.outlineStartY+s,i,n)}end(t){if(!this.hasSelectedElsWhenStart())return this.editor.hudManager.selectArea.clear(),void this.editor.activedElsManager.clear();this.editor.hudManager.outlineHud.clear();const{x:e,y:s}=t.getDiffPos();this.editor.executeCommand("dmove",this.selectedEls,e,s),this.editor.activedElsManager.setEls(this.selectedEls),this.selectedEls=[]}endOutside(){this.editor.hudManager.outlineHud.clear(),this.editor.hudManager.selectArea.clear(),this.editor.activedElsManager.clear(),this.selectedEls=[]}}},"./src/modules/zoom.js":(t,e,s)=>{s.r(e),s.d(e,{ZoomManager:()=>o});const{getViewBox:r}=s("./src/util/svg.js");class o{constructor(){this.editor=null}setEditor(t){this.editor=t}getZoom(){return parseFloat(this.editor.svgRoot.getAttribute("width"))/r(this.editor.svgRoot).w}setZoom(t){console.log(t);const e=r(this.editor.svgRoot),s=e.w*t,o=e.h*t;this.editor.svgRoot.setAttribute("width",s),this.editor.svgRoot.setAttribute("height",o)}zoomIn(){const t=this.getZoom();this.setZoom(t+.1)}zoomOut(){const t=this.getZoom();this.setZoom(t-.1)}}},"./src/toolManager.js":(t,e,s)=>{s.r(e),s.d(e,{ToolManager:()=>o});const{EditorEventContext:r}=s("./src/editorEventContext.js");class o{constructor(t){this.editor=t,this.tools={},this.currentTool=null,this.invokeWhenSwitch=()=>{},this.ctx=null}setCurrentTool(t){this.currentTool=this.tools[t],this.invokeWhenSwitch(this.getCurrentToolName())}onSwitchTool(t){this.invokeWhenSwitch=t}getCurrentToolName(){return this.currentTool.name()}registerTool(t){this.tools[t.name()]=t,t.setEditor(this.editor)}bindToolEvent(){const t=this.editor.svgRoot;t.addEventListener("mousedown",(t=>{const e=new r(this.editor,t);this.ctx=e,this.currentTool.start(e)}),!1),t.addEventListener("mousemove",(t=>{const e=this.ctx;e&&(e.setOriginEvent(t),e.pressMouse(),this.currentTool.move(e))}),!1),t.addEventListener("mouseup",(t=>{const e=this.ctx;this.currentTool.end(e),e.isEndInside=!0}),!1),window.addEventListener("mouseup",(t=>{this.ctx&&0==this.ctx.isEndInside&&this.currentTool.endOutside(this.ctx),this.ctx=null}),!1)}}},"./src/util/math.js":(t,e,s)=>{function r(t,e,s,r){let o,i,n,a;return n=Math.abs(s-t),a=Math.abs(r-e),o=Math.min(s,t),i=Math.min(r,e),{x:o,y:i,w:n,h:a}}s.r(e),s.d(e,{getBoxBy2points:()=>r})},"./src/util/svg.js":(t,e,s)=>{function r(t){const e=t.getAttribute("viewBox");if(!e)throw new Error("has not viewBox attribute");const[s,r,o,i]=e.split(/[\s,]+/).map((t=>parseFloat(t)));return{x:s,y:r,w:o,h:i}}s.r(e),s.d(e,{getViewBox:()=>r})}},e={};function s(r){if(e[r])return e[r].exports;var o=e[r]={exports:{}};return t[r](o,o.exports,s),o.exports}s.d=(t,e)=>{for(var r in e)s.o(e,r)&&!s.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s("./src/index.js")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdmctZWRpdG9yLy4vc3JjL2FjdGl2ZWRFbHNNYW5hZ2VyLmpzIiwid2VicGFjazovL3N2Zy1lZGl0b3IvLi9zcmMvY29tbWFuZC5qcyIsIndlYnBhY2s6Ly9zdmctZWRpdG9yLy4vc3JjL2NvbW1hbmRNYW5hZ2VyLmpzIiwid2VicGFjazovL3N2Zy1lZGl0b3IvLi9zcmMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3N2Zy1lZGl0b3IvLi9zcmMvZWRpdG9yLmpzIiwid2VicGFjazovL3N2Zy1lZGl0b3IvLi9zcmMvZWRpdG9yRXZlbnRDb250ZXh0LmpzIiwid2VicGFjazovL3N2Zy1lZGl0b3IvLi9zcmMvZWRpdG9yU2V0dGluZy5qcyIsIndlYnBhY2s6Ly9zdmctZWRpdG9yLy4vc3JjL2VsZW1lbnQvYmFzZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vc3ZnLWVkaXRvci8uL3NyYy9lbGVtZW50L2luZGV4LmpzIiwid2VicGFjazovL3N2Zy1lZGl0b3IvLi9zcmMvZWxlbWVudC9yZWN0LmpzIiwid2VicGFjazovL3N2Zy1lZGl0b3IvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3ZnLWVkaXRvci8uL3NyYy9sYXllci9odWRNYW5hZ2VyLmpzIiwid2VicGFjazovL3N2Zy1lZGl0b3IvLi9zcmMvbGF5ZXIvb3V0bGluZUh1ZC5qcyIsIndlYnBhY2s6Ly9zdmctZWRpdG9yLy4vc3JjL2xheWVyL3NlbGVjdEFyZWEuanMiLCJ3ZWJwYWNrOi8vc3ZnLWVkaXRvci8uL3NyYy9tb2R1bGVzL2FkZFJlY3QuanMiLCJ3ZWJwYWNrOi8vc3ZnLWVkaXRvci8uL3NyYy9tb2R1bGVzL2RyYWdDYW52YXMuanMiLCJ3ZWJwYWNrOi8vc3ZnLWVkaXRvci8uL3NyYy9tb2R1bGVzL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly9zdmctZWRpdG9yLy4vc3JjL21vZHVsZXMvem9vbS5qcyIsIndlYnBhY2s6Ly9zdmctZWRpdG9yLy4vc3JjL3Rvb2xNYW5hZ2VyLmpzIiwid2VicGFjazovL3N2Zy1lZGl0b3IvLi9zcmMvdXRpbC9tYXRoLmpzIiwid2VicGFjazovL3N2Zy1lZGl0b3IvLi9zcmMvdXRpbC9zdmcuanMiLCJ3ZWJwYWNrOi8vc3ZnLWVkaXRvci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zdmctZWRpdG9yL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9zdmctZWRpdG9yL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vc3ZnLWVkaXRvci93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3N2Zy1lZGl0b3Ivd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbIkFjdGl2ZWRFbHNNYW5hZ2VyIiwiZWRpdG9yIiwidGhpcyIsImVscyIsImhlaWdobGlndGhFbHMiLCJodWRNYW5hZ2VyIiwib3V0bGluZUh1ZCIsImNsZWFyIiwiZWwiLCJmb3JFYWNoIiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsImdldEJCb3giLCJkcmF3UmVjdCIsIkJhc2VDb21tYW5kIiwiRXJyb3IiLCJBZGRSZWN0Q29tbWFuZCIsInciLCJoIiwic3VwZXIiLCJyZWN0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJOUyIsInNldEF0dHJpYnV0ZSIsImZpbGwiLCJzZXR0aW5nIiwiZ2V0Iiwic3Ryb2tlIiwic3Ryb2tlV2lkdGgiLCJnZXRDdXJyZW50TGF5ZXIiLCJhcHBlbmRDaGlsZCIsIm5leHRTaWJsaW5nIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwicGFyZW50IiwicGFyZW50RWxlbWVudCIsImVsZW1lbnQiLCJpbnNlcnRCZWZvcmUiLCJyZW1vdmUiLCJETW92ZSIsImR4IiwiZHkiLCJkbW92ZSIsInJlZG9TdGFjayIsInVuZG9TdGFjayIsImNvbW1hbmRDbGFzc2VzIiwibmFtZSIsImFyZ3MiLCJ0b0xvd2VyQ2FzZSIsImNvbW1hbmQiLCJDb21tYW5kQ2xhc3MiLCJwdXNoIiwibGVuZ3RoIiwiY29uc29sZSIsImxvZyIsInBvcCIsInVuZG8iLCJyZWRvIiwiY29tbWFuZENsYXNzIiwiSFRNTCIsIk1BVEgiLCJTRSIsIlNWRyIsIlhMSU5LIiwiWE1MIiwiWE1MTlMiLCJjb21tYW5kTWFuYWdlciIsInpvb21NYW5hZ2VyIiwiYWN0aXZlZEVsc01hbmFnZXIiLCJ2aWV3cG9ydCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsInN0eWxlIiwiYm9yZGVyIiwidmlld3BvcnRXaWR0aCIsInZpZXdwb3J0SGVpZ2h0Iiwic3ZnQ29udGFpbmVyIiwiYmFja2dyb3VuZENvbG9yIiwib3ZlcmZsb3ciLCJzdmdSb290Iiwic3ZnU3RhZ2UiLCJzdmdCZyIsImJnUmVjdCIsInN2Z0NvbnRlbnQiLCJsYXllciIsImN1cnJlbnRMYXllciIsIkh1ZE1hbmFnZXIiLCJtb3VudCIsInNlbGVjdG9yIiwicXVlcnlTZWxlY3RvciIsInRvb2xNYW5hZ2VyIiwic2V0Q3VycmVudFRvb2wiLCJ0b29sIiwicmVnaXN0ZXJUb29sIiwic2V0RWRpdG9yIiwicGFyYW1zIiwiZXhlY3V0ZSIsImdldFpvb20iLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiZ2V0QXR0cmlidXRlIiwiRWRpdG9yRXZlbnRDb250ZXh0IiwiZSIsIm1vdXNlUHJlc3NlZCIsIm9yaWdpbkV2ZW50IiwiaXNFbmRJbnNpZGUiLCJzdGFydFgiLCJzdGFydFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInN0YXJ0Q2xpZW50WCIsInN0YXJ0Q2xpZW50WSIsInNldFN0YXJ0UG9zIiwiZ2V0UG9zIiwiY2xpZW50WCIsImNsaWVudFkiLCJ6b29tIiwiZ2V0Q29udGVudE9mZnNldCIsIkVkaXRvclNldHRpbmciLCJ2YWwiLCJGRWxlbWVudCIsImVsXyIsInByb3AiLCJGU1ZHIiwiUmVjdCIsInNldEF0dHIiLCJwYXJzZUZsb2F0IiwiZ2V0QXR0ciIsInBvcyIsInJlc2lndGVyQ29tbWFuZENsYXNzIiwic2V0U2V0dGluZyIsInNldENvbW1hbmRNYW5hZ2VyIiwiVG9vbE1hbmFnZXIiLCJzZXRUb29sTWFuYWdlciIsIkRyYWdDYW52YXMiLCJTZWxlY3QiLCJvblN3aXRjaFRvb2wiLCJ1bmRlZmluZWQiLCJ0b29sQmFyIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJjaGlsZHJlbiIsIml0ZW0iLCJjbGFzc0xpc3QiLCJnZXRFbGVtZW50QnlJZCIsImFkZCIsImFjdGl2ZUJ0biIsImJpbmRUb29sRXZlbnQiLCJzZXRab29tTWFuYWdlciIsIlpvb21NYW5hZ2VyIiwib25jbGljayIsImV4ZWN1dGVDb21tYW5kIiwiem9vbUluIiwiem9vbU91dCIsImNvbnRhaW5lciIsInNlbGVjdEFyZWEiLCJTZWxlY3RBcmVhIiwiT3V0bGluZUh1ZCIsIm91dGxpbmUiLCJkaXNwbGF5IiwiZCIsImN0eCIsImVuZFgiLCJlbmRZIiwiZ2V0U3RhcnRQb3MiLCJnZXRCb3hCeTJwb2ludHMiLCJzdGFydE9mZnNldFgiLCJzdGFydE9mZnNldFkiLCJzY3JvbGwiLCJnZXRTY3JvbGwiLCJnZXREaWZmUG9zIiwic2V0U2Nyb2xsIiwic2VsZWN0ZWRFbHMiLCJvdXRsaW5lU3RhcnRYIiwib3V0bGluZVN0YXJ0WSIsInRhcmdldEVsZW1lbnQiLCJ0YXJnZXQiLCJpc0NvbnRlbnRFbGVtZW50IiwidGFyZ2V0RkVsZW1lbnQiLCJoYXNTZWxlY3RlZEVsc1doZW5TdGFydCIsImdldFdpZHRoIiwiZ2V0SGVpZ2h0Iiwic2V0RWxzIiwiZ2V0Vmlld0JveCIsInZpZXdCb3giLCJjdXJyZW50Wm9vbSIsInNldFpvb20iLCJ0b29scyIsImN1cnJlbnRUb29sIiwiaW52b2tlV2hlblN3aXRjaCIsImdldEN1cnJlbnRUb29sTmFtZSIsImZuIiwiYWRkRXZlbnRMaXN0ZW5lciIsInN0YXJ0Iiwic2V0T3JpZ2luRXZlbnQiLCJwcmVzc01vdXNlIiwibW92ZSIsImVuZCIsIndpbmRvdyIsImVuZE91dHNpZGUiLCJ4MSIsInkxIiwieDIiLCJ5MiIsIk1hdGgiLCJhYnMiLCJtaW4iLCJzcGxpdCIsIm1hcCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJvYmoiLCJoYXNPd25Qcm9wZXJ0eSIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIl0sIm1hcHBpbmdzIjoiO3lHQUlPLE1BQU1BLEVBQ1gsWUFBWUMsR0FDVkMsS0FBS0QsT0FBU0EsRUFDZEMsS0FBS0MsSUFBTSxHQUViLE9BQU9BLEdBQ0xELEtBQUtDLElBQU1BLEVBR1hELEtBQUtFLGdCQUVQLFFBQ0VGLEtBQUtDLElBQU0sR0FFUUQsS0FBS0QsT0FBT0ksV0FDcEJDLFdBQVdDLFFBRXhCLFNBQVNDLElBSVQsV0FRQSxnQkFFRSxNQUFNTCxFQUFNRCxLQUFLQyxJQUNYRSxFQUFhSCxLQUFLRCxPQUFPSSxXQUMvQkYsRUFBSU0sU0FBUUQsSUFDVixNQUFNLEVBQUNFLEVBQUMsRUFBRUMsRUFBQyxNQUFFQyxFQUFLLE9BQUVDLEdBQVVMLEVBQUdNLFVBRWpDVCxFQUFXQyxXQUFXUyxTQUFTTCxFQUFHQyxFQUFHQyxFQUFPQyxTLDRHQ3RDbEQsTUFBTUcsRUFDSixPQUNFLE1BQU0sSUFBSUMsTUFBTSwrQkFFbEIsT0FDRSxNQUFNLElBQUlBLE1BQU0sZ0NBU2IsTUFBTUMsVUFBdUJGLEVBQ2xDLFlBQVlmLEVBQVFTLEVBQUdDLEVBQUdRLEVBQUdDLEdBQzNCQyxRQUVBLE1BQU1DLEVBQU9DLFNBQVNDLGdCQUFnQixFQUFBQyxHQUFBLElBQVEsUUFDOUNILEVBQUtJLGFBQWEsSUFBS2hCLEdBQ3ZCWSxFQUFLSSxhQUFhLElBQUtmLEdBQ3ZCVyxFQUFLSSxhQUFhLFFBQVNQLEdBQzNCRyxFQUFLSSxhQUFhLFNBQVVOLEdBRTVCLE1B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bmV4cG9ydCBjbGFzcyBBY3RpdmVkRWxzTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKGVkaXRvcikge1xuICAgIHRoaXMuZWRpdG9yID0gZWRpdG9yXG4gICAgdGhpcy5lbHMgPSBbXVxuICB9XG4gIHNldEVscyhlbHMpIHtcbiAgICB0aGlzLmVscyA9IGVsc1xuICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuZWRpdG9yLnRvb2xNYW5hZ2VyLmdldEN1cnJlbnRUb29sTmFtZSgpKVxuICAgIC8vIFRPRE86IGhpZ2hsaWdodCBvdXRsaW5lLCBhY2NvcmRpbmcgdG8gY3VycmVudCB0b29sXG4gICAgdGhpcy5oZWlnaGxpZ3RoRWxzKClcbiAgfVxuICBjbGVhcigpIHtcbiAgICB0aGlzLmVscyA9IFtdXG4gICAgLy8gY2xlYXIgb3V0bGluZVxuICAgIGNvbnN0IGh1ZE1hbmFnZXIgPSB0aGlzLmVkaXRvci5odWRNYW5hZ2VyXG4gICAgaHVkTWFuYWdlci5vdXRsaW5lSHVkLmNsZWFyKClcbiAgfVxuICBjb250YWlucyhlbCkge1xuICAgIC8vIFRPRE86XG5cbiAgfVxuICBnZXRiYm94KCkge1xuICAgIC8vIFRPRE86XG4gICAgLyogbGV0IHgsIHksIHcsIGhcbiAgICB0aGlzLmVscy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGNvbnN0IGJib3ggPSBlbC5lbCgpLmdldGJib3goKVxuICAgIH0pICovXG4gIH1cbiAgLy8gaGVpZ2h0bGlnaHQgdGhlIGVsZW1lbnRzXG4gIGhlaWdobGlndGhFbHMoKSB7XG4gICAgLy8gVE9ETzpcbiAgICBjb25zdCBlbHMgPSB0aGlzLmVsc1xuICAgIGNvbnN0IGh1ZE1hbmFnZXIgPSB0aGlzLmVkaXRvci5odWRNYW5hZ2VyXG4gICAgZWxzLmZvckVhY2goZWwgPT4ge1xuICAgICAgY29uc3Qge3gsIHksIHdpZHRoLCBoZWlnaHR9ID0gZWwuZ2V0QkJveCgpXG4gICAgICAvLyBjb25zb2xlLmxvZyhib3gpXG4gICAgICBodWRNYW5hZ2VyLm91dGxpbmVIdWQuZHJhd1JlY3QoeCwgeSwgd2lkdGgsIGhlaWdodClcbiAgICB9KVxuICB9XG59IiwiaW1wb3J0IHsgTlMgfSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5jbGFzcyBCYXNlQ29tbWFuZCB7XG4gIHVuZG8oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwbGVhc2Ugb3ZlcnJpZGUgdW5kbyBtZXRob2QnKVxuICB9XG4gIHJlZG8oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwbGVhc2Ugb3ZlcnJpZGUgcmVkbyBtZXRob2QnKVxuICB9XG59XG5cbi8qKlxuICogYWRkUmVjdFxuICogXG4gKiBhZGQgcmVjdCBzdmcgZWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgQWRkUmVjdENvbW1hbmQgZXh0ZW5kcyBCYXNlQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGVkaXRvciwgeCwgeSwgdywgaCkge1xuICAgIHN1cGVyKClcbiAgICAvLyBUT0RPOiDkvb/nlKjnvJbovpHlmajkvb/nlKjnmoTpopzoibLnrYnmoLflvI9cbiAgICBjb25zdCByZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKE5TLlNWRywgJ3JlY3QnKVxuICAgIHJlY3Quc2V0QXR0cmlidXRlKCd4JywgeClcbiAgICByZWN0LnNldEF0dHJpYnV0ZSgneScsIHkpXG4gICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdylcbiAgICByZWN0LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgaClcblxuICAgIGNvbnN0IGZpbGwgPSBlZGl0b3Iuc2V0dGluZy5nZXQoJ2ZpbGwnKVxuICAgIGNvbnN0IHN0cm9rZSA9IGVkaXRvci5zZXR0aW5nLmdldCgnc3Ryb2tlJylcbiAgICBjb25zdCBzdHJva2VXaWR0aCA9IGVkaXRvci5zZXR0aW5nLmdldCgnc3Ryb2tlV2lkdGgnKVxuICAgIHJlY3Quc2V0QXR0cmlidXRlKCdmaWxsJywgZmlsbClcbiAgICByZWN0LnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgc3Ryb2tlKVxuICAgIHJlY3Quc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCBzdHJva2VXaWR0aClcblxuICAgIGVkaXRvci5nZXRDdXJyZW50TGF5ZXIoKS5hcHBlbmRDaGlsZChyZWN0KVxuXG4gICAgdGhpcy5uZXh0U2libGluZyA9IHJlY3QubmV4dEVsZW1lbnRTaWJsaW5nIFxuICAgIHRoaXMucGFyZW50ID0gcmVjdC5wYXJlbnRFbGVtZW50XG4gICAgdGhpcy5lbGVtZW50ID0gcmVjdFxuICB9XG5cbiAgc3RhdGljIG5hbWUoKSB7XG4gICAgcmV0dXJuICdhZGRSZWN0J1xuICB9XG5cbiAgcmVkbygpIHtcbiAgICBpZiAodGhpcy5uZXh0U2libGluZykge1xuICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMuZWxlbWVudCwgdGhpcy5uZXh0U2libGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIHVuZG8oKSB7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZSgpXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIERNb3ZlIGV4dGVuZHMgQmFzZUNvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihlZGl0b3IsIGVscywgZHgsIGR5KSB7XG4gICAgc3VwZXIoKVxuXG4gICAgdGhpcy5keCA9IGR4XG4gICAgdGhpcy5keSA9IGR5XG4gICAgdGhpcy5lbHMgPSBlbHNcblxuICAgIHRoaXMuZWxzLmZvckVhY2goZWwgPT4ge1xuICAgICAgZWwuZG1vdmUodGhpcy5keCwgdGhpcy5keSlcbiAgICB9KVxuICAgIFxuICB9XG5cbiAgc3RhdGljIG5hbWUoKSB7XG4gICAgcmV0dXJuICdkbW92ZSdcbiAgfVxuXG4gIHJlZG8oKSB7XG4gICAgdGhpcy5lbHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICBlbC5kbW92ZSh0aGlzLmR4LCB0aGlzLmR5KVxuICAgIH0pXG4gIH1cblxuICB1bmRvKCkge1xuICAgIHRoaXMuZWxzLmZvckVhY2goZWwgPT4ge1xuICAgICAgZWwuZG1vdmUoLXRoaXMuZHgsIC10aGlzLmR5KVxuICAgIH0pXG4gIH1cbn0iLCJcblxuXG5cbi8qKlxuICogQ29tbWFuZE1hbmFnZXJcbiAqIFxuICog5ZG95Luk566h55CG5LqGXG4gKiBcbiAqIENvbW1hbmRNYW5hZ2VyLnVuZG8oKVxuICogQ29tbWFuZE1hbmFnZXIucmVkbygpXG4gKi9cbmNsYXNzIENvbW1hbmRNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5yZWRvU3RhY2sgPSBbXVxuICAgIHRoaXMudW5kb1N0YWNrID0gW11cbiAgICB0aGlzLmNvbW1hbmRDbGFzc2VzID0ge31cbiAgfVxuICBzZXRFZGl0b3IoZWRpdG9yKSB7XG4gICAgdGhpcy5lZGl0b3IgPSBlZGl0b3JcbiAgfVxuICBleGVjdXRlKG5hbWUsIC4uLmFyZ3MpIHtcbiAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgY29uc3QgQ29tbWFuZENsYXNzID0gdGhpcy5jb21tYW5kQ2xhc3Nlc1tuYW1lXVxuXG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBDb21tYW5kQ2xhc3ModGhpcy5lZGl0b3IsIC4uLmFyZ3MpIC8vIOWIm+W7uiBjb21tYW5kIOWunuS+i1xuXG4gICAgdGhpcy51bmRvU3RhY2sucHVzaChjb21tYW5kKVxuICAgIHRoaXMucmVkb1N0YWNrID0gW11cbiAgfVxuICB1bmRvKCkge1xuICAgIGlmICh0aGlzLnVuZG9TdGFjay5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnNvbGUubG9nKCfliLDlpLTkuobvvIzml6Dms5Xnu6fnu63mkqTlm54nKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IGNvbW1hbmQgPSB0aGlzLnVuZG9TdGFjay5wb3AoKVxuICAgIHRoaXMucmVkb1N0YWNrLnB1c2goY29tbWFuZClcbiAgICBjb21tYW5kLnVuZG8oKVxuICB9XG4gIHJlZG8oKSB7XG4gICAgaWYgKHRoaXMucmVkb1N0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc29sZS5sb2coJ+WIsOWktOS6hu+8jOaXoOazlee7p+e7remHjeWBmicpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgY29tbWFuZCA9IHRoaXMucmVkb1N0YWNrLnBvcCgpXG4gICAgdGhpcy51bmRvU3RhY2sucHVzaChjb21tYW5kKVxuICAgIGNvbW1hbmQucmVkbygpXG4gIH1cblxuICAvLyDms6jlhozlkb3ku6TnsbvliLDlkb3ku6TnrqHnkIblr7nosaHkuK3jgIJcbiAgcmVzaWd0ZXJDb21tYW5kQ2xhc3MoY29tbWFuZENsYXNzKSB7XG4gICAgbmFtZSA9IGNvbW1hbmRDbGFzcy5uYW1lKCkudG9Mb3dlckNhc2UoKVxuICAgIHRoaXMuY29tbWFuZENsYXNzZXNbbmFtZV0gPSBjb21tYW5kQ2xhc3NcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb21tYW5kTWFuYWdlciIsIi8vIOW4uOmHj1xuXG5jb25zdCBOUyA9IHtcbiAgSFRNTDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnLFxuICBNQVRIOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCcsXG4gIFNFOiAnaHR0cDovL3N2Zy1lZGl0Lmdvb2dsZWNvZGUuY29tJyxcbiAgU1ZHOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICBYTElOSzogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLFxuICBYTUw6ICdodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2UnLFxuICBYTUxOUzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvJyAvLyBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLXhtbC1uYW1lcy8jeG1sUmVzZXJ2ZWRcbn07XG5cbmV4cG9ydCB7XG4gIE5TLFxufSBcblxuXG5cbiIsImltcG9ydCB7IEFjdGl2ZWRFbHNNYW5hZ2VyIH0gZnJvbSBcIi4vYWN0aXZlZEVsc01hbmFnZXJcIlxuaW1wb3J0IHsgRWRpdG9yRXZlbnRDb250ZXh0IH0gZnJvbSBcIi4vZWRpdG9yRXZlbnRDb250ZXh0XCJcbmltcG9ydCB7IEh1ZE1hbmFnZXIgfSBmcm9tIFwiLi9sYXllci9odWRNYW5hZ2VyXCJcblxuY2xhc3MgRWRpdG9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zZXR0aW5nID0gbnVsbFxuICAgIHRoaXMuY29tbWFuZE1hbmFnZXIgPSBudWxsXG4gICAgdGhpcy56b29tTWFuYWdlciA9IG51bGxcbiAgICB0aGlzLmFjdGl2ZWRFbHNNYW5hZ2VyID0gbmV3IEFjdGl2ZWRFbHNNYW5hZ2VyKHRoaXMpXG5cblxuICAgIC8vIGNvbnN0IGNvbnRlbnRXaWR0aCA9IDQwMFxuICAgIC8vIGNvbnN0IGNvbnRlbnRIZWlnaHQgPSAzMDBcbiAgICAvLyBjb25zdCBzdGFnZVdpZHRoID0gMTAwMCAvLyDmraPlnKjnuqDnu5Plkb3lkI1cbiAgICAvLyBjb25zdCBzdGFnZUhlaWdodCA9IDYwMFxuICAgIGNvbnN0IHZpZXdwb3J0V2lkdGggPSA4MDBcbiAgICBjb25zdCB2aWV3cG9ydEhlaWdodCA9IDU1MFxuXG4gICAgY29uc3Qgdmlld3BvcnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHZpZXdwb3J0LmlkID0gJ3ZpZXdwb3J0J1xuICAgIHZpZXdwb3J0LnN0eWxlLmJvcmRlciA9ICcxcHggc29saWQgIzAwMCdcbiAgICB2aWV3cG9ydC5zdHlsZS53aWR0aCA9IHZpZXdwb3J0V2lkdGggKyAncHgnXG4gICAgdmlld3BvcnQuc3R5bGUuaGVpZ2h0ID0gdmlld3BvcnRIZWlnaHQgKyAncHgnXG4gICAgdGhpcy52aWV3cG9ydCA9IHZpZXdwb3J0XG4gICAgXG4gICAgY29uc3Qgc3ZnQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBzdmdDb250YWluZXIuaWQgPSAnc3ZnLWNvbnRhaW5lcidcbiAgICBzdmdDb250YWluZXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyNkZGQnXG4gICAgc3ZnQ29udGFpbmVyLnN0eWxlLndpZHRoID0gdmlld3BvcnRXaWR0aCArICdweCdcbiAgICBzdmdDb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gdmlld3BvcnRIZWlnaHQgKyAncHgnXG4gICAgc3ZnQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCdcbiAgICB0aGlzLnN2Z0NvbnRhaW5lciA9IHN2Z0NvbnRhaW5lclxuXG4gICAgY29uc3Qgc3ZnUm9vdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJylcbiAgICBzdmdSb290LmlkID0gJ3N2Zy1yb290J1xuICAgIHN2Z1Jvb3Quc2V0QXR0cmlidXRlKCd3aWR0aCcsIDEwMDApXG4gICAgc3ZnUm9vdC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIDYwMClcbiAgICBzdmdSb290LnNldEF0dHJpYnV0ZSgndmlld0JveCcsICcwIDAgMTAwMCA2MDAnKVxuICAgIHRoaXMuc3ZnUm9vdCA9IHN2Z1Jvb3RcblxuICAgIGNvbnN0IHN2Z1N0YWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdzdmcnKVxuICAgIHN2Z1N0YWdlLmlkID0gJ3N2Zy1zdGFnZSdcbiAgICBzdmdTdGFnZS5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgNDAwKVxuICAgIHN2Z1N0YWdlLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgMzAwKVxuICAgIHN2Z1N0YWdlLnNldEF0dHJpYnV0ZSgneCcsIDMwMClcbiAgICBzdmdTdGFnZS5zZXRBdHRyaWJ1dGUoJ3knLCAxNTApXG4gICAgc3ZnU3RhZ2Uuc3R5bGUub3ZlcmZsb3cgPSAndmlzaWJsZSdcbiAgICB0aGlzLnN2Z1N0YWdlID0gc3ZnU3RhZ2VcblxuICAgIGNvbnN0IHN2Z0JnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJylcbiAgICBzdmdCZy5pZCA9ICdiYWNrZ3JvdW5kJ1xuICAgIC8vIHN2Z0JnLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCA0MDApXG4gICAgLy8gc3ZnQmcuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCAzMDApXG4gICAgc3ZnQmcuc2V0QXR0cmlidXRlKCd4JywgMClcbiAgICBzdmdCZy5zZXRBdHRyaWJ1dGUoJ3knLCAwKVxuXG4gICAgY29uc3QgYmdSZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdyZWN0JylcbiAgICBiZ1JlY3Quc2V0QXR0cmlidXRlKCd3aWR0aCcsICcxMDAlJylcbiAgICBiZ1JlY3Quc2V0QXR0cmlidXRlKCdoZWlnaHQnLCAnMTAwJScpXG4gICAgYmdSZWN0LnNldEF0dHJpYnV0ZSgnZmlsbCcsICcjZmZmJylcblxuICAgIGNvbnN0IHN2Z0NvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2cnKVxuICAgIHN2Z0NvbnRlbnQuaWQgPSAnY29udGVudCdcbiAgICAvLyBzdmdDb250ZW50LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCA0MDApXG4gICAgLy8gc3ZnQ29udGVudC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIDMwMClcbiAgICBzdmdDb250ZW50LnNldEF0dHJpYnV0ZSgneCcsIDApXG4gICAgc3ZnQ29udGVudC5zZXRBdHRyaWJ1dGUoJ3knLCAwKVxuICAgIHRoaXMuc3ZnQ29udGVudCA9IHN2Z0NvbnRlbnRcblxuICAgIGNvbnN0IGxheWVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJylcbiAgICBsYXllci5pZCA9ICdsYXllci0xJ1xuICAgIHRoaXMuY3VycmVudExheWVyID0gbGF5ZXJcblxuICAgIHZpZXdwb3J0LmFwcGVuZENoaWxkKHN2Z0NvbnRhaW5lcilcbiAgICBzdmdDb250YWluZXIuYXBwZW5kQ2hpbGQoc3ZnUm9vdClcbiAgICBzdmdSb290LmFwcGVuZENoaWxkKHN2Z1N0YWdlKVxuXG4gICAgc3ZnU3RhZ2UuYXBwZW5kQ2hpbGQoc3ZnQmcpXG4gICAgc3ZnQmcuYXBwZW5kQ2hpbGQoYmdSZWN0KVxuICAgIHN2Z1N0YWdlLmFwcGVuZENoaWxkKHN2Z0NvbnRlbnQpXG4gICAgc3ZnQ29udGVudC5hcHBlbmRDaGlsZChsYXllcilcblxuXG4gICAgdGhpcy5odWRNYW5hZ2VyID0gbmV3IEh1ZE1hbmFnZXIoKVxuICAgIHRoaXMuaHVkTWFuYWdlci5tb3VudChzdmdTdGFnZSlcblxuICAgIC8vIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodmlld3BvcnQpXG4gIH1cbiAgbW91bnQoc2VsZWN0b3IpIHtcbiAgICBjb25zdCBtb3VudE5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKVxuICAgIG1vdW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzLnZpZXdwb3J0KVxuICB9XG4gIGdldEN1cnJlbnRMYXllcigpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50TGF5ZXJcbiAgfVxuXG4gIHNldFRvb2xNYW5hZ2VyKHRvb2xNYW5hZ2VyKSB7XG4gICAgdGhpcy50b29sTWFuYWdlciA9IHRvb2xNYW5hZ2VyXG4gIH1cbiAgLy8gdG9vbCByZWxhdGl2ZWQgbWV0aG9kc1xuICBzZXRDdXJyZW50VG9vbChuYW1lKSB7XG4gICAgdGhpcy50b29sTWFuYWdlci5zZXRDdXJyZW50VG9vbChuYW1lKVxuICB9XG4gIHJlZ2lzdGVyVG9vbCh0b29sKSB7XG4gICAgdGhpcy50b29sTWFuYWdlci5yZWdpc3RlclRvb2wodG9vbClcbiAgfVxuICBzZXRTZXR0aW5nKHNldHRpbmcpIHtcbiAgICB0aGlzLnNldHRpbmcgPSBzZXR0aW5nXG4gIH1cblxuICAvLyDlkb3ku6Tnm7jlhbNcbiAgc2V0Q29tbWFuZE1hbmFnZXIoY29tbWFuZE1hbmFnZXIpIHtcbiAgICB0aGlzLmNvbW1hbmRNYW5hZ2VyID0gY29tbWFuZE1hbmFnZXJcbiAgICBjb21tYW5kTWFuYWdlci5zZXRFZGl0b3IodGhpcylcbiAgfVxuICBleGVjdXRlQ29tbWFuZChuYW1lLCAuLi5wYXJhbXMpIHtcbiAgICBpZiAobmFtZSA9PSAndW5kbycpIHtcbiAgICAgIHRoaXMuY29tbWFuZE1hbmFnZXIudW5kbygpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKG5hbWUgPT0gJ3JlZG8nKSB7XG4gICAgICB0aGlzLmNvbW1hbmRNYW5hZ2VyLnJlZG8oKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMuY29tbWFuZE1hbmFnZXIuZXhlY3V0ZShuYW1lLCAuLi5wYXJhbXMpXG4gIH1cblxuICAvLyB6b29tXG4gIHNldFpvb21NYW5hZ2VyKHpvb21NYW5hZ2VyKSB7XG4gICAgem9vbU1hbmFnZXIuc2V0RWRpdG9yKHRoaXMpXG4gICAgdGhpcy56b29tTWFuYWdlciA9IHpvb21NYW5hZ2VyXG4gIH1cbiAgZ2V0Wm9vbSgpIHsgLy8g5bCB6KOFXG4gICAgcmV0dXJuIHRoaXMuem9vbU1hbmFnZXIuZ2V0Wm9vbSgpXG4gIH1cblxuICBnZXRTY3JvbGwoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHRoaXMuc3ZnQ29udGFpbmVyLnNjcm9sbExlZnQsXG4gICAgICB5OiB0aGlzLnN2Z0NvbnRhaW5lci5zY3JvbGxUb3AsXG4gICAgfVxuICB9XG4gIHNldFNjcm9sbCh4LCB5KSB7XG4gICAgdGhpcy5zdmdDb250YWluZXIuc2Nyb2xsTGVmdCA9IHhcbiAgICB0aGlzLnN2Z0NvbnRhaW5lci5zY3JvbGxUb3AgPSB5XG4gIH1cbiAgZ2V0Q29udGVudE9mZnNldCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogdGhpcy5zdmdTdGFnZS5nZXRBdHRyaWJ1dGUoJ3gnKSxcbiAgICAgIHk6IHRoaXMuc3ZnU3RhZ2UuZ2V0QXR0cmlidXRlKCd5JyksXG4gICAgfVxuICB9XG5cbiAgaXNDb250ZW50RWxlbWVudChlbCkge1xuICAgIHdoaWxlIChlbCkge1xuICAgICAgaWYgKGVsLnBhcmVudEVsZW1lbnQgPT0gdGhpcy5zdmdDb250ZW50KSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICBpZiAoZWwucGFyZW50RWxlbWVudCA9PSB0aGlzLnN2Z1Jvb3QpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnRcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRWRpdG9yXG4iLCJcbi8qKlxuICogY29udGV4dCBjbGFzc1xuICogXG4gKiB1c2VkIGZvciB0b29sIGV2ZW50XG4gKi9cblxuZXhwb3J0IGNsYXNzIEVkaXRvckV2ZW50Q29udGV4dCB7XG4gIGNvbnN0cnVjdG9yKGVkaXRvciwgZSkge1xuICAgIHRoaXMubW91c2VQcmVzc2VkID0gZmFsc2VcbiAgICB0aGlzLm9yaWdpbkV2ZW50ID0gZVxuICAgIHRoaXMuZWRpdG9yID0gZWRpdG9yXG4gICAgdGhpcy5pc0VuZEluc2lkZSA9IGZhbHNlXG5cbiAgICB0aGlzLnN0YXJ0WCA9IDBcbiAgICB0aGlzLnN0YXJ0WSA9IDBcblxuICAgIHRoaXMub2Zmc2V0WCA9IDBcbiAgICB0aGlzLm9mZnNldFkgPSAwXG5cbiAgICB0aGlzLnN0YXJ0Q2xpZW50WCA9IDAgLy8gdXNlZCB0byBjYWxjIGR4IGFuZCBkeS5cbiAgICB0aGlzLnN0YXJ0Q2xpZW50WSA9IDBcbiAgICB0aGlzLmR4ID0gMFxuICAgIHRoaXMuZHkgPSAwXG5cbiAgICB0aGlzLnNldFN0YXJ0UG9zKClcbiAgfVxuICBzZXRPcmlnaW5FdmVudChlKSB7XG4gICAgdGhpcy5vcmlnaW5FdmVudCA9IGVcbiAgfVxuICBzZXRTdGFydFBvcygpIHtcbiAgICBjb25zdCB7IHgsIHkgfSA9IHRoaXMuZ2V0UG9zKClcblxuICAgIHRoaXMuc3RhcnRYID0geFxuICAgIHRoaXMuc3RhcnRZID0geVxuXG4gICAgdGhpcy5zdGFydENsaWVudFggPSB0aGlzLm9yaWdpbkV2ZW50LmNsaWVudFhcbiAgICB0aGlzLnN0YXJ0Q2xpZW50WSA9IHRoaXMub3JpZ2luRXZlbnQuY2xpZW50WVxuICB9XG4gIHJlbGVhc2VNb3VzZSgpIHtcbiAgICB0aGlzLm1vdXNlUHJlc3NlZCA9IGZhbHNlXG4gIH1cbiAgcHJlc3NNb3VzZSgpIHtcbiAgICB0aGlzLm1vdXNlUHJlc3NlZCA9IHRydWVcbiAgfVxuICBnZXRQb3MoKSB7XG4gICAgY29uc3Qgem9vbSA9IHRoaXMuZWRpdG9yLmdldFpvb20oKVxuICAgIGNvbnN0IHt4LCB5fSA9IHRoaXMuZWRpdG9yLmdldENvbnRlbnRPZmZzZXQoKVxuICAgIHJldHVybiB7IFxuICAgICAgeDogdGhpcy5vcmlnaW5FdmVudC5vZmZzZXRYIC8gem9vbSAtIHgsIFxuICAgICAgeTogdGhpcy5vcmlnaW5FdmVudC5vZmZzZXRZIC8gem9vbSAtIHksXG4gICAgfVxuICB9XG4gIGdldFN0YXJ0UG9zKCkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiB0aGlzLnN0YXJ0WCxcbiAgICAgIHk6IHRoaXMuc3RhcnRZLFxuICAgIH1cbiAgfVxuICAvLyB3aXRob3V0IGNhbGMgd2l0aCB6b29tIHZhbHVlXG4gIGdldERpZmZQb3MoKSB7XG4gICAgY29uc3QgeCA9IHRoaXMub3JpZ2luRXZlbnQuY2xpZW50WCAtIHRoaXMuc3RhcnRDbGllbnRYXG4gICAgY29uc3QgeSA9IHRoaXMub3JpZ2luRXZlbnQuY2xpZW50WSAtIHRoaXMuc3RhcnRDbGllbnRZXG4gICAgcmV0dXJuIHsgeCwgeSB9XG4gIH1cblxufSIsIlxuZXhwb3J0IGNsYXNzIEVkaXRvclNldHRpbmcge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnNldHRpbmcgPSB7XG4gICAgICBmaWxsOiAnI2ZmZicsXG4gICAgICBzdHJva2U6ICcjMDAwJyxcbiAgICAgIHN0cm9rZVdpZHRoOiAnMnB4JyxcblxuICAgICAgLy8gb3V0bGluZVdpZHRoXG4gICAgICAvLyBvdXRsaW5lQ29sb3JcbiAgICB9XG4gIH1cbiAgc2V0RmlsbCh2YWwpIHtcbiAgICB0aGlzLnNldHRpbmcuZmlsbCA9IHZhbFxuICB9XG4gIHNldFN0cm9rZSh2YWwpIHtcbiAgICB0aGlzLnNldHRpbmcuZmlsbCA9IHZhbFxuICB9XG4gIHNldChuYW1lLCB2YWwpIHtcbiAgICB0aGlzLnNldHRpbmdbbmFtZV0gPSB2YWxcbiAgfVxuICBnZXQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLnNldHRpbmdbbmFtZV1cbiAgfVxufSIsIlxuLyoqXG4gKiDlr7kgU1ZHIOWFg+e0oOeahOeugOWNleWwgeijhVxuICovXG5cbmV4cG9ydCBjbGFzcyBGRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZWxfID0gbnVsbFxuICB9XG4gIGVsKCkge1xuICAgIHJldHVybiB0aGlzLmVsX1xuICB9XG4gIHNldEF0dHIocHJvcCwgdmFsKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxfLnNldEF0dHJpYnV0ZShwcm9wLCB2YWwpXG4gIH1cbiAgZ2V0QXR0cihwcm9wKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxfLmdldEF0dHJpYnV0ZShwcm9wKVxuICB9XG4gIGdldEJCb3goKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxfLmdldEJCb3goKVxuICB9XG59IiwiaW1wb3J0IHsgUmVjdCB9IGZyb20gXCIuL3JlY3RcIlxuXG5cbi8qKlxuICogRlNWR1xuICogXG4gKiBzaW1wbGUgU1ZHRWxlbWVudCBlbmNhcHN1bGF0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBGU1ZHID0ge1xuICBSZWN0LFxufSIsIlxuLyoqXG4gKiDlr7kgcmVjdCDlhYPntKDnmoTnroDljZXlsIHoo4VcbiAqL1xuXG5pbXBvcnQgeyBOUyB9IGZyb20gXCIuLi9jb25zdGFudHNcIlxuaW1wb3J0IHsgRkVsZW1lbnQgfSBmcm9tIFwiLi9iYXNlRWxlbWVudFwiXG5cbmV4cG9ydCBjbGFzcyBSZWN0IGV4dGVuZHMgRkVsZW1lbnQge1xuICAvLyBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlciwgdzogbnVtYmVyLCBoOiBudW1iZXIpO1xuICAvLyBjb25zdHJ1Y3RvcihlbDogU1ZHRWxlbWVudCk7XG4gIGNvbnN0cnVjdG9yKHgsIHksIHcsIGgpIHtcbiAgICBzdXBlcigpXG4gICAgaWYgKHR5cGVvZiB4ID09ICdvYmplY3QnKSB7XG4gICAgICB0aGlzLmVsXyA9IHhcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbF8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoTlMuU1ZHLCAncmVjdCcpXG4gICAgICB0aGlzLmVsXy5zZXRBdHRyKCd4JywgeClcbiAgICAgIHRoaXMuZWxfLnNldEF0dHIoJ3knLCB5KVxuICAgICAgdGhpcy5lbF8uc2V0QXR0cignd2lkdGgnLCB3KVxuICAgICAgdGhpcy5lbF8uc2V0QXR0cignaGVpZ2h0JywgaClcbiAgICB9XG4gIH1cbiAgZ2V0UG9zKCkge1xuICAgIGNvbnN0IHggPSBwYXJzZUZsb2F0KHRoaXMuZ2V0QXR0cigneCcpKVxuICAgIGNvbnN0IHkgPSBwYXJzZUZsb2F0KHRoaXMuZ2V0QXR0cigneScpKVxuICAgIHJldHVybiB7IHgsIHkgfVxuICB9XG4gIGRtb3ZlKGR4LCBkeSkge1xuICAgIGNvbnN0IHBvcyA9IHRoaXMuZ2V0UG9zKClcbiAgICB0aGlzLnNldEF0dHIoJ3gnLCBwb3MueCArIGR4KVxuICAgIHRoaXMuc2V0QXR0cigneScsIHBvcy55ICsgZHkpXG4gIH1cbn0iLCJpbXBvcnQgQ29tbWFuZE1hbmFnZXIgZnJvbSAnLi9jb21tYW5kTWFuYWdlci5qcydcbmltcG9ydCBFZGl0b3IgZnJvbSAnLi9lZGl0b3IuanMnXG5pbXBvcnQgQWRkUmVjdCBmcm9tICcuL21vZHVsZXMvYWRkUmVjdC5qcydcbmltcG9ydCB7IERyYWdDYW52YXMgfSBmcm9tICcuL21vZHVsZXMvZHJhZ0NhbnZhcy5qcydcblxuaW1wb3J0IHsgQWRkUmVjdENvbW1hbmQsIERNb3ZlIH0gZnJvbSAnLi9jb21tYW5kLmpzJ1xuaW1wb3J0IHsgRWRpdG9yU2V0dGluZyB9IGZyb20gJy4vZWRpdG9yU2V0dGluZy5qcydcbmltcG9ydCB7IFpvb21NYW5hZ2VyIH0gZnJvbSAnLi9tb2R1bGVzL3pvb20uanMnXG5pbXBvcnQgeyBTZWxlY3QgfSBmcm9tICcuL21vZHVsZXMvc2VsZWN0LmpzJ1xuaW1wb3J0IHsgVG9vbE1hbmFnZXIgfSBmcm9tICcuL3Rvb2xNYW5hZ2VyLmpzJ1xuXG5mdW5jdGlvbiBhY3RpdmVCdG4obmFtZSkge1xuICBuYW1lID0ge1xuICAgICdzZWxlY3QnOiAnYnRuLXNlbGVjdCcsXG4gICAgJ2FkZFJlY3QnOiAnYnRuLWFkZC1yZWN0JyxcbiAgICAnZHJhZ0NhbnZhcyc6ICdidG4tZHJhZy1jYW52YXMnLFxuICB9W25hbWVdXG4gIGlmIChuYW1lID09IHVuZGVmaW5lZCkgcmV0dXJuXG5cbiAgY29uc3QgdG9vbEJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0b29sLWJhcicpXG4gIGNvbnN0IHRvb2xCdG5zID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodG9vbEJhci5jaGlsZHJlbilcbiAgdG9vbEJ0bnMuZm9yRWFjaChpdGVtID0+IHtcbiAgICBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXG4gIH0pXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG5hbWUpLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG59XG5cblxuY29uc3QgZWRpdG9yID0gbmV3IEVkaXRvcigpXG5cbi8vIHJlZ2lzdGVyIGNvbW1hbmRzXG5jb25zdCBjb21tYW5kTWFuYWdlciA9IG5ldyBDb21tYW5kTWFuYWdlcigpXG5jb21tYW5kTWFuYWdlci5yZXNpZ3RlckNvbW1hbmRDbGFzcyhBZGRSZWN0Q29tbWFuZClcbmNvbW1hbmRNYW5hZ2VyLnJlc2lndGVyQ29tbWFuZENsYXNzKERNb3ZlKVxuLy8gc2V0dGluZ1xuZWRpdG9yLnNldFNldHRpbmcobmV3IEVkaXRvclNldHRpbmcoKSlcblxuZWRpdG9yLnNldENvbW1hbmRNYW5hZ2VyKGNvbW1hbmRNYW5hZ2VyKVxuLy8gcmVnaXN0ZXIgdG9vbHNcblxuY29uc3QgdG9vbE1hbmFnZXIgPSBuZXcgVG9vbE1hbmFnZXIoZWRpdG9yKVxuZWRpdG9yLnNldFRvb2xNYW5hZ2VyKHRvb2xNYW5hZ2VyKVxudG9vbE1hbmFnZXIucmVnaXN0ZXJUb29sKG5ldyBBZGRSZWN0KCkpXG50b29sTWFuYWdlci5yZWdpc3RlclRvb2wobmV3IERyYWdDYW52YXMoKSlcbnRvb2xNYW5hZ2VyLnJlZ2lzdGVyVG9vbChuZXcgU2VsZWN0KCkpXG5cbmVkaXRvci50b29sTWFuYWdlci5vblN3aXRjaFRvb2wobmFtZSA9PiB7XG4gIGNvbnNvbGUubG9nKCdzd2l0Y2hlZCB0b29sOicsIG5hbWUpXG4gIGFjdGl2ZUJ0bihuYW1lKVxufSlcblxudG9vbE1hbmFnZXIuc2V0Q3VycmVudFRvb2woJ2FkZFJlY3QnKVxudG9vbE1hbmFnZXIuYmluZFRvb2xFdmVudCgpXG4vLyB6b29tXG5lZGl0b3Iuc2V0Wm9vbU1hbmFnZXIobmV3IFpvb21NYW5hZ2VyKCkpXG5cbmVkaXRvci5tb3VudCgnI2VkaXRvci1hcmVhJylcblxuXG4vKiogXG4gKiBiaW5kIGV2ZW50IGluIGJ1dHRvblxuICovIFxuLy8gdW5kb1xuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2J0bi11bmRvJykub25jbGljayA9ICgpID0+IHtcbiAgZWRpdG9yLmV4ZWN1dGVDb21tYW5kKCd1bmRvJylcbn1cbi8vIHJlZG9cbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNidG4tcmVkbycpLm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgZWRpdG9yLmV4ZWN1dGVDb21tYW5kKCdyZWRvJylcbn1cbi8vIHpvb21JblxuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2J0bi16b29tLWluJykub25jbGljayA9IGZ1bmN0aW9uKCkge1xuICBlZGl0b3Iuem9vbU1hbmFnZXIuem9vbUluKClcbn1cbi8vIHpvb21PdXRcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNidG4tem9vbS1vdXQnKS5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XG4gIGVkaXRvci56b29tTWFuYWdlci56b29tT3V0KClcbn1cbi8vIHNlbGVjdCBhZGRSZWN0IHRvb2xcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNidG4tYWRkLXJlY3QnKS5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XG4gIGVkaXRvci5zZXRDdXJyZW50VG9vbCgnYWRkUmVjdCcpXG59XG4vLyBzZWxlY3QgZHJhZ2NhbnZhcyB0b29sXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYnRuLWRyYWctY2FudmFzJykub25jbGljayA9IGZ1bmN0aW9uKCkge1xuICBlZGl0b3Iuc2V0Q3VycmVudFRvb2woJ2RyYWdDYW52YXMnKVxufVxuLy8gc2VsZWN0IHRvb2xcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNidG4tc2VsZWN0Jykub25jbGljayA9IGZ1bmN0aW9uKCkge1xuICBlZGl0b3Iuc2V0Q3VycmVudFRvb2woJ3NlbGVjdCcpXG59XG5cbi8qKlxuICog55CG5oOzIGFwaSDkvb/nlKjkvovlrZBcbiAqIFxuICogY29uc3QgZWRpdG9yQnVpbGRlciA9IG5ldyBFZGl0b3IuYnVpbGRlcigpXG4gKiBlZGl0b3JCdWlsZGVyXG4gKiAgIC5zZXRDYW52YXNTaXplKDQwMCwgMzAwKVxuICogICAuc2V0U3RhZ2VTaXplKDEwMDAsIDgwMClcbiAqICAgLnNldFZpZXdwb3J0U2l6ZSg4MDAsIDUwMClcbiAqICAgLnNldFpvb20oMTAwKVxuICogXG4gKiBjb25zdCBlZGl0b3IgPSBlZGl0b3JCdWlsZGVyLmJ1aWxkKClcbiAqIGVkaXRvci5yZWdpc3RlclRvb2wodG9vbE1vdmUpXG4gKiBcbiAqLyIsIi8qKlxuICogZ3VpZGUgbGluZSBsYXllclxuICovXG5cbmltcG9ydCB7IE91dGxpbmVIdWQgfSBmcm9tIFwiLi9vdXRsaW5lSHVkXCI7XG5pbXBvcnQgeyBTZWxlY3RBcmVhIH0gZnJvbSBcIi4vc2VsZWN0QXJlYVwiO1xuY29uc3QgeyBOUyB9ID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxuZXhwb3J0IGNsYXNzIEh1ZE1hbmFnZXJ7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKE5TLlNWRywgJ2cnKVxuICAgIHRoaXMuY29udGFpbmVyLmlkID0gJ2h1ZHMnXG5cbiAgICB0aGlzLnNlbGVjdEFyZWEgPSBuZXcgU2VsZWN0QXJlYSh0aGlzLmNvbnRhaW5lcilcbiAgICB0aGlzLm91dGxpbmVIdWQgPSBuZXcgT3V0bGluZUh1ZCh0aGlzLmNvbnRhaW5lcilcbiAgfVxuICBtb3VudChlbCkge1xuICAgIGVsLmFwcGVuZENoaWxkKHRoaXMuY29udGFpbmVyKVxuICB9XG59XG5cbiIsIlxuXG4gIFxuY29uc3QgeyBOUyB9ID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxuLyoqXG4gKiA8cmVjdD4gb3V0bGluZVxuICovXG5leHBvcnQgY2xhc3MgT3V0bGluZUh1ZCB7XG4gIGNvbnN0cnVjdG9yKHBhcmVudCkge1xuICAgIHRoaXMueCA9IDBcbiAgICB0aGlzLnkgPSAwXG4gICAgdGhpcy53ID0gMFxuICAgIHRoaXMuaCA9IDBcblxuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKE5TLlNWRywgJ2cnKVxuICAgIHRoaXMuY29udGFpbmVyLmlkID0gJ291dGxpbmUtaHVkJ1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lcilcblxuICAgIHRoaXMub3V0bGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhOUy5TVkcsICdwYXRoJylcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKCdmaWxsJywgJ25vbmUnKVxuICAgIHRoaXMub3V0bGluZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICcjZjA0JylcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKCd2ZWN0b3ItZWZmZWN0JywgJ25vbi1zY2FsaW5nLXN0cm9rZScpXG5cbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLm91dGxpbmUpXG4gIH1cbiAgY2xlYXIoKSB7XG4gICAgLy8gcGFyZW50LmlubmVySFRNTCA9ICcnXG4gICAgdGhpcy5vdXRsaW5lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgfVxuICBkcmF3UmVjdCh4LCB5LCB3LCBoKSB7XG4gICAgdGhpcy54ID0geFxuICAgIHRoaXMueSA9IHlcbiAgICB0aGlzLncgPSB3XG4gICAgdGhpcy5oID0gaFxuXG4gICAgLy8gd2h5IGRvbid0IEkgdXNlIHJlY3QsIGp1c3Qgc29sdmUgdGhlIGNvbmRpdGlvbiB3aGVuIHdpZHRoIG9yIGhlaWdodCBpcyAwIHRoZSBvdXRsaW5lIGlzIGRpc2FwcGVyXG4gICAgY29uc3QgZCA9IGBNICR7eH0gJHt5fSBMICR7eCt3fSAke3l9IEwgJHt4K3d9ICR7eStofSBMICR7eH0gJHt5K2h9IFpgXG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZSgnZCcsIGQpXG4gICAgdGhpcy5vdXRsaW5lLnN0eWxlLmRpc3BsYXkgPSAnJ1xuICB9XG4gIGdldFdpZHRoKCkgeyByZXR1cm4gdGhpcy53IH1cbiAgZ2V0SGVpZ2h0KCkgeyByZXR1cm4gdGhpcy5oIH1cbiAgZ2V0WCgpIHsgcmV0dXJuIHRoaXMueCB9XG4gIGdldFkoKSB7IHJldHVybiB0aGlzLnkgfVxufSIsIlxuY29uc3QgeyBOUyB9ID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxuLyoqXG4gKiBzZWxlY3QgYXJlYVxuICovXG5leHBvcnQgY2xhc3MgU2VsZWN0QXJlYSB7XG4gIGNvbnN0cnVjdG9yKHBhcmVudCkge1xuICAgIHRoaXMueCA9IDBcbiAgICB0aGlzLnkgPSAwXG4gICAgdGhpcy53ID0gMFxuICAgIHRoaXMuaCA9IDBcblxuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKE5TLlNWRywgJ2cnKVxuICAgIHRoaXMuY29udGFpbmVyLmlkID0gJ3NlbGVjdC1hcmVhJ1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lcilcblxuICAgIHRoaXMub3V0bGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhOUy5TVkcsICdwYXRoJylcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKCdmaWxsJywgJ25vbmUnKVxuICAgIHRoaXMub3V0bGluZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICcjMDU0JylcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKCd2ZWN0b3ItZWZmZWN0JywgJ25vbi1zY2FsaW5nLXN0cm9rZScpXG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWRhc2hhcnJheScsICc0cHgnKVxuXG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5vdXRsaW5lKVxuICB9XG4gIGNsZWFyKCkge1xuICAgIC8vIHBhcmVudC5pbm5lckhUTUwgPSAnJ1xuICAgIHRoaXMub3V0bGluZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gIH1cbiAgZHJhd1JlY3QoeCwgeSwgdywgaCkge1xuICAgIHRoaXMueCA9IHhcbiAgICB0aGlzLnkgPSB5XG4gICAgdGhpcy53ID0gd1xuICAgIHRoaXMuaCA9IGhcblxuICAgIC8vIHdoeSBkb24ndCBJIHVzZSByZWN0LCBqdXN0IHNvbHZlIHRoZSBjb25kaXRpb24gd2hlbiB3aWR0aCBvciBoZWlnaHQgaXMgMCB0aGUgb3V0bGluZSBpcyBkaXNhcHBlclxuICAgIGNvbnN0IGQgPSBgTSAke3h9ICR7eX0gTCAke3grd30gJHt5fSBMICR7eCt3fSAke3kraH0gTCAke3h9ICR7eStofSBaYFxuICAgIHRoaXMub3V0bGluZS5zZXRBdHRyaWJ1dGUoJ2QnLCBkKVxuXG4gICAgLyogdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZSgneCcsIHgpXG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZSgneScsIHkpXG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB3KVxuICAgIHRoaXMub3V0bGluZS5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIGgpICovXG4gICAgdGhpcy5vdXRsaW5lLnN0eWxlLmRpc3BsYXkgPSAnJ1xuICB9XG4gIGdldFdpZHRoKCkgeyByZXR1cm4gdGhpcy53IH1cbiAgZ2V0SGVpZ2h0KCkgeyByZXR1cm4gdGhpcy5oIH1cbiAgZ2V0WCgpIHsgcmV0dXJuIHRoaXMueCB9XG4gIGdldFkoKSB7IHJldHVybiB0aGlzLnkgfVxufSIsIlxuaW1wb3J0IHsgZ2V0Qm94QnkycG9pbnRzIH0gZnJvbSBcIi4uL3V0aWwvbWF0aFwiXG5cbmNsYXNzIEFkZFJlY3Qge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmVkaXRvciA9IG51bGxcbiAgfVxuICBuYW1lKCkge1xuICAgIHJldHVybiAnYWRkUmVjdCdcbiAgfVxuICBzZXRFZGl0b3IoZWRpdG9yKSB7IC8vIOS+nei1luazqOWFpVxuICAgIHRoaXMuZWRpdG9yID0gZWRpdG9yXG4gIH1cbiAgc3RhcnQoY3R4KSB7fVxuICBtb3ZlKGN0eCkge1xuICAgIGNvbnN0IHsgeDogZW5kWCwgeTogZW5kWSB9ID0gY3R4LmdldFBvcygpXG4gICAgY29uc3QgeyB4OiBzdGFydFgsIHk6IHN0YXJ0WSB9ID0gY3R4LmdldFN0YXJ0UG9zKClcbiAgICBjb25zdCB7IHgsIHksIHcsIGggfSA9IGdldEJveEJ5MnBvaW50cyhzdGFydFgsIHN0YXJ0WSwgZW5kWCwgZW5kWSlcbiAgICB0aGlzLmVkaXRvci5odWRNYW5hZ2VyLm91dGxpbmVIdWQuZHJhd1JlY3QoeCwgeSwgdywgaClcbiAgfVxuICBlbmQoY3R4KSB7XG4gICAgdGhpcy5lZGl0b3IuaHVkTWFuYWdlci5vdXRsaW5lSHVkLmNsZWFyKClcblxuICAgIGNvbnN0IHsgeDogZW5kWCwgeTogZW5kWSB9ID0gY3R4LmdldFBvcygpXG4gICAgY29uc3QgeyB4OiBzdGFydFgsIHk6IHN0YXJ0WSB9ID0gY3R4LmdldFN0YXJ0UG9zKClcbiAgICBjb25zdCB7IHgsIHksIHcsIGggfSA9IGdldEJveEJ5MnBvaW50cyhzdGFydFgsIHN0YXJ0WSwgZW5kWCwgZW5kWSlcbiAgICBpZiAodyA8IDIgJiYgaCA8IDIpIHtcbiAgICAgIC8vIFRPRE86IG9wZW4gYSBkaWFsb2cgdG8gaW5wdXQgd2lkdGggYW5kIGhlaWdodFxuICAgICAgY29uc29sZS5sb2coJ3dpZHRoIGFuZCBoZWlnaHQgYm90aCBsZXNzIGVxdWFsIHRvIDLvvIxkcmF3aW5nIG5vdGhpbmcnKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMuZWRpdG9yLmV4ZWN1dGVDb21tYW5kKCdhZGRSZWN0JywgeCwgeSwgdywgaClcbiAgfVxuICAvLyBtb3VzZWRvd24gb3V0c2lkZSB2aWV3cG9ydFxuICBlbmRPdXRzaWRlKCkge1xuICAgIHRoaXMuZWRpdG9yLmh1ZE1hbmFnZXIub3V0bGluZUh1ZC5jbGVhcigpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWRkUmVjdCIsIlxuZXhwb3J0IGNsYXNzIERyYWdDYW52YXMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN0YXJ0T2Zmc2V0WCA9IDBcbiAgICB0aGlzLnN0YXJ0T2Zmc2V0WSA9IDBcbiAgfVxuICBuYW1lKCkge1xuICAgIHJldHVybiAnZHJhZ0NhbnZhcydcbiAgfVxuICBzZXRFZGl0b3IoZWRpdG9yKSB7IC8vIOS+nei1luazqOWFpVxuICAgIHRoaXMuZWRpdG9yID0gZWRpdG9yXG4gIH1cbiAgYmVmb3JlQWN0aXZlKCkge1xuICAgIC8vIGRvIHNvbWV0aGluZyBiZWZvcmUgc3dpdGNoIHRvIGN1cnJlbnQgdG9vbFxuICB9XG4gIHN0YXJ0KGN0eCkge1xuICAgIGNvbnN0IHNjcm9sbCA9IHRoaXMuZWRpdG9yLmdldFNjcm9sbCgpXG4gICAgdGhpcy5zdGFydE9mZnNldFggPSBzY3JvbGwueFxuICAgIHRoaXMuc3RhcnRPZmZzZXRZID0gc2Nyb2xsLnlcbiAgfVxuICBtb3ZlKGN0eCkge1xuICAgIGNvbnN0IHpvb20gPSB0aGlzLmVkaXRvci5nZXRab29tKClcbiAgICBjb25zdCB7IHg6IGR4LCB5OiBkeSB9ID0gY3R4LmdldERpZmZQb3MoKVxuICAgIHRoaXMuZWRpdG9yLnNldFNjcm9sbCh0aGlzLnN0YXJ0T2Zmc2V0WCAtIGR4LCB0aGlzLnN0YXJ0T2Zmc2V0WSAtIGR5KVxuICB9XG4gIGVuZCgpIHt9XG4gIGVuZE91dHNpZGUoKSB7fVxufVxuIiwiaW1wb3J0IHsgRlNWRyB9IGZyb20gXCIuLi9lbGVtZW50XCJcbmltcG9ydCB7IGdldEJveEJ5MnBvaW50cyB9IGZyb20gXCIuLi91dGlsL21hdGhcIlxuXG4vKipcbiAqIHNlbGVjdFxuICogXG4gKiDmraTmqKHlnZfpnZ7luLjlpI3mnYJcbiAqIFxuICogMS4g6byg5qCH5oyJ5LiL5pe277yM6YCJ5Lit5Y2V5Liq5YWD57SgXG4gKiAyLiDpvKDmoIfmjInkuIvkuLrnqbrvvIzmi5bmi73ml7bkuqfnlJ/pgInkuK3moYbvvIzlj6/ku6XpgInmi6nlpJrkuKrlhYPntKBcbiAqIDMuIOmAieS4reWNleS4qu+8iOaIlumAieWMuumAieS4reWkmuS4qu+8iSDnvKnmlL4g562J5o6n5Yi254K577yM5ouW5ou95pS55Y+Y5a696auYXG4gKiAzLiDliIfmlq3liIDov5nkuKrlt6Xlhbfml7bvvIzmv4DmtLvnmoTlhYPntKDov5vlhaXooqvpgInkuK3nirbmgIHvvIjova7lu5Pnur8r5o6n5Yi254K577yJ44CCXG4gKiA0LiDpgInljLrlkozlhYPntKDnm7jkuqTnmoTliKTlrppcbiAqIDUuIOa/gOa0u+WFg+e0oOWmguS9leS/neWtmO+8jOS/neWtmOWIsOWTqumHjFxuICovXG5leHBvcnQgY2xhc3MgU2VsZWN0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5lZGl0b3IgPSBudWxsXG4gICAgdGhpcy5zZWxlY3RlZEVscyA9IFtdXG5cbiAgICB0aGlzLm91dGxpbmVTdGFydFggPSAwXG4gICAgdGhpcy5vdXRsaW5lU3RhcnRZID0gMFxuICB9XG4gIG5hbWUoKSB7XG4gICAgcmV0dXJuICdzZWxlY3QnXG4gIH1cbiAgc2V0RWRpdG9yKGVkaXRvcikge1xuICAgIHRoaXMuZWRpdG9yID0gZWRpdG9yXG4gIH1cbiAgaGFzU2VsZWN0ZWRFbHNXaGVuU3RhcnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRFbHMubGVuZ3RoID4gMFxuICB9XG4gIHN0YXJ0KGN0eCkge1xuICAgIGNvbnN0IHRhcmdldEVsZW1lbnQgPSBjdHgub3JpZ2luRXZlbnQudGFyZ2V0XG4gICAgaWYgKCF0aGlzLmVkaXRvci5pc0NvbnRlbnRFbGVtZW50KHRhcmdldEVsZW1lbnQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB0YXJnZXRGRWxlbWVudCA9IG5ldyBGU1ZHLlJlY3QodGFyZ2V0RWxlbWVudCkgLy8g5pqC5pe25Y+q5pivIHJlY3QgVE9ETzog5pS55Li66YCa55So5YaZ5rOVXG4gICAgdGhpcy5zZWxlY3RlZEVscyA9IFsgdGFyZ2V0RkVsZW1lbnQgXSAvLyDpvKDmoIfmjInkuIvml7bvvIzlsLHpgInkuK3kuobkuIDkuKrlhYPntKBcbiAgICBjb25zdCB4ID0gcGFyc2VGbG9hdCh0YXJnZXRGRWxlbWVudC5nZXRBdHRyKCd4JykpXG4gICAgY29uc3QgeSA9IHBhcnNlRmxvYXQodGFyZ2V0RkVsZW1lbnQuZ2V0QXR0cigneScpKVxuICAgIGNvbnN0IHcgPSBwYXJzZUZsb2F0KHRhcmdldEZFbGVtZW50LmdldEF0dHIoJ3dpZHRoJykpXG4gICAgY29uc3QgaCA9IHBhcnNlRmxvYXQodGFyZ2V0RkVsZW1lbnQuZ2V0QXR0cignaGVpZ2h0JykpXG5cbiAgICB0aGlzLm91dGxpbmVTdGFydFggPSB4XG4gICAgdGhpcy5vdXRsaW5lU3RhcnRZID0geVxuXG4gICAgdGhpcy5lZGl0b3IuaHVkTWFuYWdlci5vdXRsaW5lSHVkLmRyYXdSZWN0KHgsIHksIHcsIGgpXG4gIH1cbiAgbW92ZShjdHgpIHtcbiAgICBpZiAoIXRoaXMuaGFzU2VsZWN0ZWRFbHNXaGVuU3RhcnQoKSkgeyAvLyBkcmF3IHNlbGVjdGluZyBhcmVhXG4gICAgICAvLyBzZWxlY3Qgbm8gZWxlbWVudCwgZHJhdyBzZWxlY3QgcmVjdFxuICAgICAgY29uc3QgeyB4OiBlbmRYLCB5OiBlbmRZIH0gPSBjdHguZ2V0UG9zKClcbiAgICAgIGNvbnN0IHsgeDogc3RhcnRYLCB5OiBzdGFydFkgfSA9IGN0eC5nZXRTdGFydFBvcygpXG4gICAgICBjb25zdCB7IHgsIHksIHcsIGggfSA9IGdldEJveEJ5MnBvaW50cyhzdGFydFgsIHN0YXJ0WSwgZW5kWCwgZW5kWSlcbiAgICAgIHRoaXMuZWRpdG9yLmh1ZE1hbmFnZXIuc2VsZWN0QXJlYS5kcmF3UmVjdCh4LCB5LCB3LCBoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgeyB4OiBkeCwgeTogZHkgfSA9IGN0eC5nZXREaWZmUG9zKClcbiAgICBjb25zdCBvdXRsaW5lSHVkID0gdGhpcy5lZGl0b3IuaHVkTWFuYWdlci5vdXRsaW5lSHVkXG4gICAgY29uc3QgdyA9IG91dGxpbmVIdWQuZ2V0V2lkdGgoKVxuICAgIGNvbnN0IGggPSBvdXRsaW5lSHVkLmdldEhlaWdodCgpXG4gICAgb3V0bGluZUh1ZC5kcmF3UmVjdCh0aGlzLm91dGxpbmVTdGFydFggKyBkeCwgdGhpcy5vdXRsaW5lU3RhcnRZICsgZHksIHcsIGgpXG4gIH1cbiAgZW5kKGN0eCkge1xuICAgIGlmICghdGhpcy5oYXNTZWxlY3RlZEVsc1doZW5TdGFydCgpKSB7IC8vIGZpbmlzaGVkIGRyYXduIHNlbGVjdGluZyBhcmVhXG4gICAgICB0aGlzLmVkaXRvci5odWRNYW5hZ2VyLnNlbGVjdEFyZWEuY2xlYXIoKVxuICAgICAgLy8gVE9ETzogYWN0aXZlIGZyYW1lIGJ5IHNlbGVjdCByZWN0LlxuICAgICAgdGhpcy5lZGl0b3IuYWN0aXZlZEVsc01hbmFnZXIuY2xlYXIoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMuZWRpdG9yLmh1ZE1hbmFnZXIub3V0bGluZUh1ZC5jbGVhcigpXG5cbiAgICBcbiAgICBjb25zdCB7IHg6IGR4LCB5OiBkeSB9ID0gY3R4LmdldERpZmZQb3MoKVxuICAgIHRoaXMuZWRpdG9yLmV4ZWN1dGVDb21tYW5kKCdkbW92ZScsIHRoaXMuc2VsZWN0ZWRFbHMsIGR4LCBkeSlcbiAgICB0aGlzLmVkaXRvci5hY3RpdmVkRWxzTWFuYWdlci5zZXRFbHModGhpcy5zZWxlY3RlZEVscykgLy8gc2V0IGdsb2JhbCBhY3RpdmVkIGVsZW1lbnRzXG4gICAgdGhpcy5zZWxlY3RlZEVscyA9IFtdXG4gIH1cbiAgLy8gbW91c2Vkb3duIG91dHNpZGUgdmlld3BvcnRcbiAgZW5kT3V0c2lkZSgpIHtcbiAgICB0aGlzLmVkaXRvci5odWRNYW5hZ2VyLm91dGxpbmVIdWQuY2xlYXIoKVxuICAgIHRoaXMuZWRpdG9yLmh1ZE1hbmFnZXIuc2VsZWN0QXJlYS5jbGVhcigpXG4gICAgdGhpcy5lZGl0b3IuYWN0aXZlZEVsc01hbmFnZXIuY2xlYXIoKVxuICAgIHRoaXMuc2VsZWN0ZWRFbHMgPSBbXVxuICB9XG59XG4iLCIvKiogem9vbSAqL1xuXG5jb25zdCB7IGdldFZpZXdCb3ggfSA9IHJlcXVpcmUoXCIuLi91dGlsL3N2Z1wiKVxuXG5leHBvcnQgY2xhc3MgWm9vbU1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmVkaXRvciA9IG51bGxcbiAgfVxuICBzZXRFZGl0b3IoZWRpdG9yKSB7XG4gICAgdGhpcy5lZGl0b3IgPSBlZGl0b3JcbiAgfVxuICBnZXRab29tKCkge1xuICAgIGNvbnN0IGFjdHVsV2lkdGggPSBwYXJzZUZsb2F0KHRoaXMuZWRpdG9yLnN2Z1Jvb3QuZ2V0QXR0cmlidXRlKCd3aWR0aCcpKVxuICAgIGNvbnN0IHZpZXdCb3ggPSBnZXRWaWV3Qm94KHRoaXMuZWRpdG9yLnN2Z1Jvb3QpXG4gICAgY29uc3Qgem9vbSA9IGFjdHVsV2lkdGggLyB2aWV3Qm94LndcbiAgICByZXR1cm4gem9vbVxuICB9XG4gIHNldFpvb20oem9vbSkge1xuICAgIGNvbnNvbGUubG9nKHpvb20pXG4gICAgY29uc3Qgdmlld0JveCA9IGdldFZpZXdCb3godGhpcy5lZGl0b3Iuc3ZnUm9vdClcbiAgICBjb25zdCB3aWR0aCA9IHZpZXdCb3gudyAqIHpvb21cbiAgICBjb25zdCBoZWlnaHQgPSB2aWV3Qm94LmggKiB6b29tXG4gICAgdGhpcy5lZGl0b3Iuc3ZnUm9vdC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgd2lkdGgpXG4gICAgdGhpcy5lZGl0b3Iuc3ZnUm9vdC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIGhlaWdodClcbiAgfVxuICB6b29tSW4oKSB7XG4gICAgY29uc3QgY3VycmVudFpvb20gPSB0aGlzLmdldFpvb20oKVxuICAgIHRoaXMuc2V0Wm9vbShjdXJyZW50Wm9vbSArIDAuMSlcbiAgfVxuICB6b29tT3V0KCkge1xuICAgIGNvbnN0IGN1cnJlbnRab29tID0gdGhpcy5nZXRab29tKClcbiAgICB0aGlzLnNldFpvb20oY3VycmVudFpvb20gLSAwLjEpXG4gIH1cbn0iLCJjb25zdCB7IEVkaXRvckV2ZW50Q29udGV4dCB9ID0gcmVxdWlyZShcIi4vZWRpdG9yRXZlbnRDb250ZXh0XCIpXG5cbmV4cG9ydCBjbGFzcyBUb29sTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKGVkaXRvcikge1xuICAgIHRoaXMuZWRpdG9yID0gZWRpdG9yXG4gICAgdGhpcy50b29scyA9IHt9XG4gICAgdGhpcy5jdXJyZW50VG9vbCA9IG51bGxcbiAgICB0aGlzLmludm9rZVdoZW5Td2l0Y2ggPSAoKSA9PiB7fVxuXG4gICAgdGhpcy5jdHggPSBudWxsIC8vIHRvb2wgY29udGV4dFxuICB9XG4gIHNldEN1cnJlbnRUb29sKG5hbWUpIHtcbiAgICB0aGlzLmN1cnJlbnRUb29sID0gdGhpcy50b29sc1tuYW1lXVxuICAgIHRoaXMuaW52b2tlV2hlblN3aXRjaCh0aGlzLmdldEN1cnJlbnRUb29sTmFtZSgpKVxuICB9XG4gIG9uU3dpdGNoVG9vbChmbikge1xuICAgIHRoaXMuaW52b2tlV2hlblN3aXRjaCA9IGZuXG4gIH1cbiAgZ2V0Q3VycmVudFRvb2xOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRUb29sLm5hbWUoKVxuICB9XG4gIHJlZ2lzdGVyVG9vbCh0b29sKSB7XG4gICAgdGhpcy50b29sc1t0b29sLm5hbWUoKV0gPSB0b29sXG4gICAgdG9vbC5zZXRFZGl0b3IodGhpcy5lZGl0b3IpIC8vIGRlcGVuZGVuY3kgaW5qZWN0aW9uXG4gIH1cblxuICBiaW5kVG9vbEV2ZW50KCkge1xuICAgIGNvbnN0IHN2Z1Jvb3QgPSB0aGlzLmVkaXRvci5zdmdSb290XG5cbiAgICBzdmdSb290LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGUgPT4ge1xuICAgICAgY29uc3QgY3R4ID0gbmV3IEVkaXRvckV2ZW50Q29udGV4dCh0aGlzLmVkaXRvciwgZSlcbiAgICAgIHRoaXMuY3R4ID0gY3R4XG4gICAgICB0aGlzLmN1cnJlbnRUb29sLnN0YXJ0KGN0eClcbiAgICB9LCBmYWxzZSlcblxuICAgIHN2Z1Jvb3QuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZSA9PiB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLmN0eFxuXG4gICAgICBpZiAoIWN0eCkgcmV0dXJuIC8vIGlmIGN0eCBleGl0cywgcHJlc2VudCBtb3VzZWRvd24gZXZlbnQgZW1pdCBqdXN0IGJlZm9yZVxuICAgICAgY3R4LnNldE9yaWdpbkV2ZW50KGUpXG4gICAgICBjdHgucHJlc3NNb3VzZSgpXG4gICAgICB0aGlzLmN1cnJlbnRUb29sLm1vdmUoY3R4KSAvLyBtb3ZlXG4gICAgfSwgZmFsc2UpXG4gICAgXG4gICAgc3ZnUm9vdC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgZSA9PiB7XG4gICAgICAvLyB0aGlzLmN0eC5yZWxlYXNlTW91c2UoKVxuICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHhcbiAgICAgIC8vIGN0eC5zZXRPcmlnaW5FdmVudChlKSAvLyB0aGUgb2Zmc2V0WCBhbmQgb2Zmc2V0WSBpbiBtb3VzZXVwIGFuZCB0aGUgbGFzdCBtb3VzZW1vdmUgaXMgbm90IGVxdWFsID8/IFxuICAgICAgdGhpcy5jdXJyZW50VG9vbC5lbmQoY3R4KVxuICAgICAgY3R4LmlzRW5kSW5zaWRlID0gdHJ1ZVxuICAgIH0sIGZhbHNlKVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBlID0+IHtcbiAgICAgIGlmICh0aGlzLmN0eCAmJiB0aGlzLmN0eC5pc0VuZEluc2lkZSA9PSBmYWxzZSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRUb29sLmVuZE91dHNpZGUodGhpcy5jdHgpXG4gICAgICB9XG4gICAgICB0aGlzLmN0eCA9IG51bGxcbiAgICB9LCBmYWxzZSlcbiAgfVxufSIsIlxuZXhwb3J0IGZ1bmN0aW9uIGdldEJveEJ5MnBvaW50cyh4MSwgeTEsIHgyLCB5Mikge1xuICBsZXQgeCwgeSwgdywgaFxuICB3ID0gTWF0aC5hYnMoeDIgLSB4MSlcbiAgaCA9IE1hdGguYWJzKHkyIC0geTEpXG4gIHggPSBNYXRoLm1pbih4MiwgeDEpXG4gIHkgPSBNYXRoLm1pbih5MiwgeTEpXG4gIHJldHVybiB7IHgsIHksIHcsIGggfVxufSIsIlxuLy8gVE9ETzogdG8gZmluaXNoXG5leHBvcnQgZnVuY3Rpb24gZ2V0Vmlld0JveChlbCkge1xuICBjb25zdCB2YWwgPSBlbC5nZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnKVxuICBpZiAoIXZhbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignaGFzIG5vdCB2aWV3Qm94IGF0dHJpYnV0ZScpXG4gIH1cbiAgY29uc3QgW3gsIHksIHcsIGhdID0gdmFsLnNwbGl0KC9bXFxzLF0rLykubWFwKGl0ZW0gPT4gcGFyc2VGbG9hdChpdGVtKSlcbiAgcmV0dXJuIHsgeCwgeSwgdywgaCB9XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGVcbl9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9pbmRleC5qc1wiKTtcbi8vIFRoaXMgZW50cnkgbW9kdWxlIHVzZWQgJ2V4cG9ydHMnIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbiJdLCJzb3VyY2VSb290IjoiIn0=